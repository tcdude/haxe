# DO NOT EDIT. Generated from /extra/github-actions
# TODO: support skip ci (https://github.community/t/github-actions-does-not-respect-skip-ci/17325/8)

name: CI
on: [push, pull_request]

jobs:
  cancel:
    name: "Cancel previous runs"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.3.1
        with:
          workflow_id: 1447568
          access_token: ${{ github.token }}

  windows64-build:
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      OPAMYES: 1
      CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
      ARCH: 64
      MINGW_ARCH: x86_64
      CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
      CYG_ROOT: C:/cygwin64
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Unix)
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          set -ex
      
          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV
      
      - name: Install Neko using snapshot from S3 (Windows)
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      - name: choco install nsis
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 10
          command: choco install --no-progress nsis.portable --version 3.02 -y
      - name: choco install things
        shell: pwsh
        run: choco install --no-progress curl wget 7zip.portable -y
      - name: Prepend Chocolatey path
        shell: pwsh
        run: Write-Host "::add-path::C:\ProgramData\chocolatey\bin"
      
      - name: Install OCaml and OCaml libraries
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          curl.exe -fsSL -o cygwin-setup.exe --retry 3 $($env:CYGWIN_SETUP)
          Start-Process -FilePath "cygwin-setup.exe" -ArgumentList "-B -q -R $($env:CYG_ROOT) -l C:/tmp -s $($env:CYG_MIRROR) -P default -P make -P git -P zlib-devel -P rsync -P patch -P diffutils -P curl -P unzip -P tar -P m4 -P perl -P libpcre-devel -P mbedtls-devel -P mingw64-$($env:MINGW_ARCH)-zlib -P mingw64-$($env:MINGW_ARCH)-gcc-core -P mingw64-$($env:MINGW_ARCH)-pcre" -Wait
          curl.exe -fsSL -o "opam.tar.xz" --retry 3 https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam$($env:ARCH).tar.xz
          curl.exe -fsSL -o "libmbedtls.tar.xz" --retry 3 https://github.com/Simn/mingw64-mbedtls/releases/download/2.16.3/mingw64-$($env:MINGW_ARCH)-mbedtls-2.16.3-1.tar.xz
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'curl -L https://cpanmin.us | perl - App::cpanminus')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm IPC::System::Simple module')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm String::ShellQuote')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'echo "$OLDPWD"')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -C / -xvf libmbedtls.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -xf opam.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && bash opam${ARCH}/install.sh')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam init mingw "https://github.com/fdopen/opam-repository-mingw.git#opam2" --comp 4.07.0+mingw${ARCH}c --switch 4.07.0+mingw${ARCH}c --auto-setup --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam update --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam pin add haxe . --kind=path --no-action --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam pin add ctypes 0.17.1 --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam install haxe --deps-only --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam list')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'ocamlopt -v')
      
      - name: Expose mingw dll files
        shell: pwsh
        run: Write-Host "::add-path::${env:CYG_ROOT}/usr/$($env:MINGW_ARCH)-w64-mingw32/sys-root/mingw/bin"
      
      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: echo "ADD_REVISION=1" >> $Env:GITHUB_ENV
      
      - name: Build Haxe
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win -j`nproc` haxe 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./haxe.exe')
      
      - name: Get haxe_bin
        run: git clone https://github.com/Kode/haxe_bin.git
      - name: Copy binary
        run: copy haxe.exe haxe_bin\haxe.exe
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Commit binary
        run: git -C haxe_bin commit -a -m "Update Windows binary to ${env:GITHUB_SHA}."
      - name: Tag binary
        run: git -C haxe_bin tag windows_${env:GITHUB_SHA}
      - name: Push binary
        run: git -C haxe_bin push https://Kode-Robbot:${env:ROBBOT_PASS}@github.com/Kode/haxe_bin.git master --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      

  linux-build:
    runs-on: ubuntu-18.04
    env:
      PLATFORM: linux64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Unix)
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          set -ex
      
          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV
      
      - name: Install Neko using snapshot from S3 (Windows)
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      - name: Install dependencies
        run: |
          set -ex
          sudo add-apt-repository ppa:avsm/ppa -y # provides OPAM 2
          sudo add-apt-repository ppa:haxe/ocaml -y # provides newer version of mbedtls
          sudo apt-get update -qqy
          sudo apt-get install -qqy ocaml-nox camlp5 opam libpcre3-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build libstring-shellquote-perl
      
      - name: Install OCaml libraries
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam pin add haxe . --no-action
          opam install haxe --deps-only
          opam list
          ocamlopt -v
      
      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV
      
      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
          ldd -v ./haxe
      
      - name: Get haxe_bin
        run: git clone https://github.com/Kode/haxe_bin.git
      - name: Copy binary
        run: cp ./haxe haxe_bin/haxe-linux64
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Commit binary
        run: git -C haxe_bin commit -a -m "Update Linux binary to $GITHUB_SHA."
      - name: Tag binary
        run: git -C haxe_bin tag linux_$GITHUB_SHA
      - name: Push binary
        run: git -C haxe_bin push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/haxe_bin.git master --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      

  mac-build:
    runs-on: macos-latest
    env:
      PLATFORM: mac
      OPAMYES: 1
      MACOSX_DEPLOYMENT_TARGET: 10.13
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Unix)
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          set -ex
      
          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV
      
      - name: Install Neko using snapshot from S3 (Windows)
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      - name: Install dependencies
        env:
          ZLIB_VERSION: 1.2.11
          MBEDTLS_VERSION: 2.25.0
          PCRE_VERSION: 8.44
        run: |
          set -ex
          brew uninstall openssl@1.0.2t || echo
          brew uninstall python@2.7.17 || echo
          brew untap local/openssl || echo
          brew untap local/python2 || echo
          brew update
          # brew unlink python@2
          brew bundle --file=tests/Brewfile --no-upgrade || brew link --overwrite awscli
          brew install cpanminus
          cpanm IPC::System::Simple
          cpanm String::ShellQuote
          curl -L https://www.zlib.net/zlib-$ZLIB_VERSION.tar.gz | tar xz
          cd zlib-$ZLIB_VERSION
          ./configure
          make && make install
          curl -L https://github.com/ARMmbed/mbedtls/archive/v$MBEDTLS_VERSION.tar.gz | tar xz
          cd mbedtls-$MBEDTLS_VERSION
          make && make install
          curl -L https://ftp.pcre.org/pub/pcre/pcre-$PCRE_VERSION.tar.gz | tar xz
          cd pcre-$PCRE_VERSION
          ./configure --enable-utf8 --enable-pcre8 --enable-pcre16 --enable-pcre32 --enable-unicode-properties --enable-pcregrep-libz --enable-pcregrep-libbz2 --enable-jit
          make && make install
      
      
      - name: Install OCaml libraries
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam switch create 4.07.1
          eval $(opam env)
          opam env
          opam pin add ctypes 0.17.1 --yes
          opam pin add haxe . --no-action
          opam install haxe --deps-only
          opam list
          ocamlopt -v
      
      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV
      
      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`sysctl -n hw.ncpu` STATICLINK=1 "LIB_PARAMS=/usr/local/lib/libz.a /usr/local/lib/libpcre.a /usr/local/lib/libmbedtls.a /usr/local/lib/libmbedcrypto.a /usr/local/lib/libmbedx509.a -cclib '-framework Security -framework CoreFoundation'" haxe
          otool -L ./haxe
      
      - name: Get haxe_bin
        run: git clone https://github.com/Kode/haxe_bin.git
      - name: Copy binary
        run: cp ./haxe haxe_bin/haxe-osx
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Commit binary
        run: git -C haxe_bin commit -a -m "Update macOS binary to $GITHUB_SHA."
      - name: Tag binary
        run: git -C haxe_bin tag macos_$GITHUB_SHA
      - name: Push binary
        run: git -C haxe_bin push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/haxe_bin.git master --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      

  freebsd-build:
    runs-on: macos-latest
    env:
      PLATTFORM: freebsd64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Apply dune patch for FreeBSD
        run: git apply extra/github-actions/patches/dune.patch
      
      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV
      
      - name: Build in FreeBSD VM
        id: build
        uses: vmactions/freebsd-vm@v0.1.3
        with:
          envs: 'OPAMYES'
          usesh: true
          mem: 2048
          prepare: pkg install -y ocaml ocaml-opam p5-string-shellquote p5-IPC-System-Simple pkgconf neko pcre gmake lzlib bash
          run: |
            set -ex
            opam init # --disable-sandboxing
            opam update
            opam pin add haxe . --no-action
            opam install haxe --deps-only
            opam list
            ocamlopt -v
            eval $(opam env)
            gmake -s -j3 STATICLINK=1 haxe
            ldd -v ./haxe
      
      - name: Get haxe_bin
        run: git clone https://github.com/Kode/haxe_bin.git
      - name: Copy binary
        run: cp ./haxe haxe_bin/haxe-freebsd
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Add binary
        run: git -C haxe_bin add -A
      - name: Commit binary
        run: git -C haxe_bin commit -a -m "Update FreeBSD binary to $GITHUB_SHA."
      - name: Tag binary
        run: git -C haxe_bin tag freebsd_$GITHUB_SHA
      - name: Push binary
        run: git -C haxe_bin push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/haxe_bin.git master --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      

  linux-arm-build:
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps for both armv6 and aarch64
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu16.04
          - arch: armv6
            distro: stretch
    env:
      PLATFORM: linuxarm
      OPAMYES: 1
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: echo "ADD_REVISION=1" >> $GITHUB_ENV
      
      - uses: uraimo/run-on-arch-action@v2.0.9
        name: Build artifact
        id: build
        env:
          OPAMYES: 1
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
      
          # Not required, but speeds up builds
          githubToken: ${{ github.token }}
      
          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
      
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
      
          # Pass the correct artifact name
          env: | # YAML, but pipe character is necessary
            artifact_name: haxe-linux-${{ matrix.arch }}
            arch: ${{ matrix.arch }}
      
          # The shell to run commands with in the container
          shell: /bin/bash
      
          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            set -ex
            cd ~
            apt-get update -y -q
            apt-get upgrade -y -q
            apt-get install -y -q build-essential m4 unzip libpcre3-dev zlib1g-dev neko git pkg-config libipc-system-simple-perl libstring-shellquote-perl wget cmake python3
            # Installing OPAM
            apt-get install -y -q ocaml \
              && wget https://github.com/ocaml/opam/releases/download/2.0.8/opam-full-2.0.8.tar.gz \
              && tar xvf opam-full-2.0.8.tar.gz \
              && cd opam-full-2.0.8 \
              && ./configure \
              && make lib-ext \
              && make \
              && make install \
              && cd .. \
              && rm -rf opam-full*
            # Installing mbedtls
            wget https://github.com/ARMmbed/mbedtls/archive/refs/tags/v2.26.0.tar.gz
            tar xvf v2.26.0.tar.gz
            cd mbedtls-2.26.0
            mkdir build && cd build
            cmake -DENABLE_TESTING=Off ..
            make -j`nproc`
            make install
            cd ../..
            rm -rf mbedtls-2.26.0
            rm v2.26.0.tar.gz
            # Installing ocaml 4.11.1
            opam init -a --disable-sandboxing
            eval $(opam env)
            opam update
            opam switch create 4.11.1
      
          # Produce a binary artifact and place it in the mounted volume
          run: |
            set -ex
            opam init -a --disable-sandboxing
            opam update
            opam pin add haxe . --no-action
            opam install haxe --deps-only -y
            opam list
            ocamlopt -v
            eval $(opam env)
            opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
            ldd -v ./haxe
            cp ./haxe "/artifacts/${artifact_name}"
      
      - name: Get haxe_bin
        run: git clone https://github.com/Kode/haxe_bin.git
      - name: Copy armv7 binary
        run: cp "${PWD}/artifacts/haxe-linux-armv6" haxe_bin/haxe-linux-armv6 && git -C haxe_bin add haxe-linux-armv6 && BUILDARCH=armv6 || echo "armv6 not yet present..."
      - name: Copy aarch64 binary
        run: cp "${PWD}/artifacts/haxe-linux-aarch64" haxe_bin/haxe-linux-aarch64 && git -C haxe_bin add haxe-linux-aarch64 && BUILDARCH=aarch64 || echo "aarch64 not yet present..."
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Commit binary
        run: git -C haxe_bin commit -a -m "Update Linux-ARM binary to $GITHUB_SHA."
      - name: Tag binary
        run: git -C haxe_bin tag linux_$BUILDARCH_$GITHUB_SHA && echo "Using tag 'linux_$BUILDARCH_$GITHUB_SHA'"
      - name: Push binary
        run: git -C haxe_bin push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/haxe_bin.git master --tags || echo "Push binary only works on the original repo"
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      
